{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08aab5e4-7ed0-45f3-a3dc-19c1080a8231",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'RA'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state=\"RAJASTHAN\"\n",
    "state[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d7c863b3-48b1-4cda-b3c8-75028da15553",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'RAJAS'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state=\"RAJASTHAN\"\n",
    "state[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "70d2b906-c072-4af9-8a80-c34db96cec7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abc 1\n",
      "abc 2\n",
      "abc 3\n",
      "abc 4\n",
      "abc 5\n",
      "abc 6\n",
      "abc 7\n",
      "abc 8\n",
      "abc 9\n",
      "abc 10\n",
      "abc 11\n",
      "abc 12\n",
      "abc 13\n",
      "abc 14\n",
      "abc 15\n",
      "abc 16\n",
      "abc 17\n",
      "abc 18\n",
      "abc 19\n",
      "abc 20\n",
      "abc 21\n"
     ]
    }
   ],
   "source": [
    "for i in range (1,22):\n",
    " print(\"abc\",i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e3c8c8d1-27be-4967-ae74-8d215aff0456",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "even no 20\n",
      "odd 21\n",
      "even no 22\n",
      "odd 23\n",
      "even no 24\n",
      "odd 25\n",
      "even no 26\n",
      "odd 27\n",
      "even no 28\n",
      "odd 29\n",
      "even no 30\n",
      "odd 31\n",
      "even no 32\n",
      "odd 33\n",
      "even no 34\n",
      "odd 35\n",
      "even no 36\n",
      "odd 37\n",
      "even no 38\n",
      "odd 39\n",
      "even no 40\n",
      "odd 41\n",
      "even no 42\n",
      "odd 43\n",
      "even no 44\n",
      "odd 45\n",
      "even no 46\n",
      "odd 47\n",
      "even no 48\n",
      "odd 49\n",
      "even no 50\n",
      "odd 51\n",
      "even no 52\n",
      "odd 53\n",
      "even no 54\n",
      "odd 55\n",
      "even no 56\n",
      "odd 57\n",
      "even no 58\n",
      "odd 59\n",
      "even no 60\n",
      "odd 61\n",
      "even no 62\n",
      "odd 63\n",
      "even no 64\n",
      "odd 65\n",
      "even no 66\n",
      "odd 67\n",
      "even no 68\n",
      "odd 69\n"
     ]
    }
   ],
   "source": [
    "for i in range (20,70):\n",
    " if(i%2==0):\n",
    "  print(\"even no\",i)\n",
    " else:\n",
    "  print(\"odd\",i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b8cc84cf-b767-4684-aad7-6eb7c2b61a9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "these no are divisible by 2 and 7 98\n",
      "these no are divisible by 2 and 7 84\n",
      "these no are divisible by 2 and 7 70\n",
      "these no are divisible by 2 and 7 56\n"
     ]
    }
   ],
   "source": [
    "for i in range (98,47,-1):\n",
    " if(i%2==0 and i%7==0):\n",
    "  print(\"these no are divisible by 2 and 7\",i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "71f2ae7b-b199-4b81-8468-ca07c26ea447",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1\n",
      "2 3\n",
      "3 6\n",
      "4 10\n",
      "5 15\n",
      "6 21\n",
      "7 28\n"
     ]
    }
   ],
   "source": [
    "piggy=0\n",
    "for i in range(1,8):\n",
    "  \n",
    "  piggy=piggy+i\n",
    "  print(i,piggy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d99a0b49-773e-411f-be48-8319192abefc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "8\n",
      "12\n",
      "16\n",
      "20\n",
      "24\n"
     ]
    }
   ],
   "source": [
    "sum=0\n",
    "for i in range (3,27):\n",
    " if(i%4==0):\n",
    "  ##sum=0\n",
    "  print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "459bfc86-9329-4c62-a033-408fb9b45741",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84\n"
     ]
    }
   ],
   "source": [
    "sum=0\n",
    "for i in range(3,27):\n",
    " if(i%4==0):\n",
    "  sum+=i\n",
    "print(sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "acbce3fc-1076-4f92-9358-fb3198719358",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "##Write a program to print all natural numbers from 1 to n. – using while loop\n",
    "for i in range(1,10):\n",
    " print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5c3b8f5f-583e-481b-9124-cafb65cf3494",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "num=6\n",
    "for i in range(1,7):\n",
    " if(i%6==0):\n",
    "  print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dd718619-9f76-4f9c-8406-37ca8729f60f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 a\n",
      "1 b\n",
      "2 c\n",
      "3 d\n",
      "4 e\n",
      "5 f\n",
      "6 g\n",
      "7 h\n",
      "8 i\n",
      "9 j\n",
      "10 k\n",
      "11 l\n",
      "12 m\n",
      "13 n\n",
      "14 o\n",
      "15 p\n",
      "16 q\n",
      "17 r\n",
      "18 s\n",
      "19 t\n",
      "20 u\n",
      "21 v\n",
      "22 w\n",
      "23 x\n",
      "24 y\n",
      "25 z\n"
     ]
    }
   ],
   "source": [
    "##2. Write a program to print all natural numbers in reverse (from n to 1). –\n",
    "state = \"abcdefghijklmnopqrstuvwxyz\"\n",
    "for i in range(0,26):\n",
    "    print(i,state[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "923b6df1-78b6-4b69-9353-927080125e80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n",
      "22\n",
      "24\n",
      "26\n",
      "28\n",
      "30\n",
      "32\n",
      "34\n",
      "36\n",
      "38\n",
      "40\n",
      "42\n",
      "44\n",
      "46\n",
      "48\n",
      "50\n",
      "52\n",
      "54\n",
      "56\n",
      "58\n",
      "60\n",
      "62\n",
      "64\n",
      "66\n",
      "68\n",
      "70\n",
      "72\n",
      "74\n",
      "76\n",
      "78\n",
      "80\n",
      "82\n",
      "84\n",
      "86\n",
      "88\n",
      "90\n",
      "92\n",
      "94\n",
      "96\n",
      "98\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,100):\n",
    " if(i%2==0):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "893ad6db-77b0-42d3-837f-83102c3c96ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "5\n",
      "7\n",
      "9\n",
      "11\n",
      "13\n",
      "49\n"
     ]
    }
   ],
   "source": [
    "sum=0\n",
    "for i in range(1,15):\n",
    " if(i%2!=0):\n",
    "  sum=sum+i\n",
    "  print(i)\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2deba12a-7b0b-4ecc-a0fa-bc04f4e82a43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n",
      "101\n",
      "102\n",
      "103\n",
      "104\n",
      "105\n",
      "106\n",
      "107\n",
      "108\n",
      "109\n",
      "110\n",
      "111\n",
      "112\n",
      "113\n",
      "114\n",
      "115\n",
      "116\n",
      "117\n",
      "118\n",
      "119\n",
      "120\n",
      "121\n",
      "122\n"
     ]
    }
   ],
   "source": [
    "count=0\n",
    "for i in range (123):\n",
    " count=count+i/10\n",
    " print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d39390df-d777-4cc7-a693-e388d85a1b3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hey\n"
     ]
    }
   ],
   "source": [
    "\n",
    "i=1\n",
    "while(i==1):\n",
    "  print(\"hey\")\n",
    "  i=i+1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
